using System;
using cAlgo.API;
using cAlgo.API.Internals;
using cAlgo.API.Indicators;
using cAlgo.Indicators;

namespace cAlgo
{
    [Indicator(IsOverlay = false, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
    public class BelkhayateCombinedArrows : Indicator
    {


        [Parameter("Timing Trigger Level", DefaultValue = 2, MaxValue = 2, MinValue = 1)]
        public int timingTriggerLevel { get; set; }

        [Parameter("Regression Trigger Level", DefaultValue = 3, MaxValue = 3, MinValue = 1)]
        public int regressionTriggerLevel { get; set; }

        [Parameter("Regression Periods", DefaultValue = 120)]
        public int regressionPeriods { get; set; }

        private string upArrow = "▲";
        private string downArrow = "▼";
        private const VerticalAlignment vAlign = VerticalAlignment.Top;
        private const HorizontalAlignment hAlign = HorizontalAlignment.Center;
        Color colorDown = Color.Red;
        Color colorUp = Color.Green;


        private double arrowOffset;

        private BelkhayateTimingX bt;
        private BelkhayatePolynomialRegressionX bpr;


        [Output("Timing", LineColor = "Red")]
        public IndicatorDataSeries ResultTiming { get; set; }

        [Output("Regression", LineColor = "Blue")]
        public IndicatorDataSeries ResultRegression { get; set; }

        protected override void Initialize()
        {
            // Initialize and create nested indicators
            arrowOffset = Symbol.PipSize * 5;
            bt = Indicators.GetIndicator<BelkhayateTimingX>();
            bpr = Indicators.GetIndicator<BelkhayatePolynomialRegressionX>(3, regressionPeriods, 1.4, 2.4, 3.4);

        }

        public override void Calculate(int index)
        {
            int x = index;
            double y;
            string arrowName;
            string textName;
            bool btsell = false;
            bool btbuy = false;
            int bprLevelHigh = 0;
            int bprLevelLow = 0;

            double triggerLevelValueSell;
            double triggerLevelValueBuy;

            // ---------------------
            // -- deal with belkhayate timing
            // ---------------------

            if (timingTriggerLevel == 2)
            {
                triggerLevelValueSell = bt.SellLine2.Last(0);
                triggerLevelValueBuy = bt.BuyLine2.Last(0);

            }
            else if (timingTriggerLevel == 1)
            {
                triggerLevelValueSell = bt.SellLine1.Last(0);
                triggerLevelValueBuy = bt.BuyLine1.Last(0);
            }
            else
            {
                throw new Exception("Invalid Trigger Level Value - must be either 1 or 2");
            }


            if (!double.IsNaN(bt.High.Last(0)) && bt.High.Last(0) > triggerLevelValueSell)
            {
                btsell = true;
            }
            else if (!double.IsNaN(bt.Low.Last(0)) && bt.Low.Last(0) < triggerLevelValueBuy)
            {
                btbuy = true;
            }

            var high = MarketSeries.High[index];
            var low = MarketSeries.Low[index];

            if (btsell)
            {
                arrowName = string.Format("ArrowSell {0}", index);
                textName = string.Format("S {0}", index);
                y = high + arrowOffset;
                var arrow = Chart.DrawText(arrowName, downArrow, MarketSeries.OpenTime[index], y, colorDown);
                arrow.VerticalAlignment = VerticalAlignment.Top;
                arrow.HorizontalAlignment = HorizontalAlignment.Center;

                var text = Chart.DrawText(textName, "S", MarketSeries.OpenTime[index], (high + 4 * arrowOffset), colorDown);
                text.VerticalAlignment = VerticalAlignment.Top;
                text.HorizontalAlignment = HorizontalAlignment.Center;

                ResultTiming[index] = 3;
            }
            else if (btbuy)
            {
                arrowName = string.Format("ArrowBuy {0}", index);
                textName = string.Format("B {0}", index);
                y = low - arrowOffset;
                var arrow = Chart.DrawText(arrowName, upArrow, MarketSeries.OpenTime[index], y, colorUp);
                arrow.VerticalAlignment = VerticalAlignment.Bottom;
                arrow.HorizontalAlignment = HorizontalAlignment.Center;

                var text = Chart.DrawText(textName, "B", MarketSeries.OpenTime[index], (low - 4 * arrowOffset), colorUp);
                text.VerticalAlignment = VerticalAlignment.Bottom;
                text.HorizontalAlignment = HorizontalAlignment.Center;

                ResultTiming[index] = -3;
            }
            else
            {
                ResultTiming[index] = 0;
            }

            // ------------------
            // deal with polynomial regression
            // -----------------

            //Print("A:  " + bpr.sqh.Last(0) + " " + bpr.sqh.Last(regressionPeriods - 1));
            //Print("B:  " + index + " " + bpr.sqh.Count + " " + (bpr.sqh.Count - 1));


            if (!double.IsNaN(bpr.sqh.Last(0)))
            {
                for (int n = 0; n < regressionPeriods; n++)
                {
                    Print(index + " " + n + " " + bpr.sqh.Last(n));

                }
            }
        }
    }
    /*
                sqh[index - n] = prc[index - n] + sq;
                sqh2[index - n] = prc[index - n] + sq2;
                sqh3[index - n] = prc[index - n] + sq3;
                sql[index - n] = prc[index - n] - sq;
                sql2[index - n] = prc[index - n] - sq2;
                sql3[index - n] = prc[index - n] - sq3;
                */


    /*
                   if (!double.IsNaN(bpr.sqh.Last(index)))
                        {
                            if (high > bpr.sqh3.Last(index))
                            {
                                bprLevelHigh = 3;
                                Print("sqh3: " + bpr.sqh3.Last(index) + "  High: " + high);
                            }
                            else if (high > bpr.sqh2.Last(index))
                            {
                                bprLevelHigh = 2;
                                Print("sqh2: " + bpr.sqh2.Last(index) + "  High: " + high);
                            }
                            else if (high > bpr.sqh.Last(index))
                            {
                                bprLevelHigh = 1;
                                Print("sqh1: " + bpr.sqh.Last(index) + "  High: " + high);
                            }
                            else
                            {
                                bprLevelHigh = 0;
                                Print("BPR Level High Set to 0 : " + high);
                            }


                            if (low < bpr.sql3.Last(index))
                            {
                                bprLevelLow = -3;
                                Print("sql3: " + bpr.sql3.Last(index) + "  Low: " + low);
                            }
                            else if (low < bpr.sql2.Last(0))
                            {
                                bprLevelLow = -2;
                                Print("sql2: " + bpr.sql2.Last(index) + "  Low: " + low);
                            }
                            else if (low < bpr.sql.Last(index))
                            {
                                bprLevelLow = -1;
                                Print("sql: " + bpr.sql.Last(index) + "  Low: " + low);
                            }
                            else
                            {
                                bprLevelLow = 0;
                                Print("BPR Level Low Set to 0 : " + low);
                            }
                        }
                        else
                        {

                        }
                    }




                    if (bprLevelHigh > 0 && bprLevelLow == 0)
                    {
                        ResultRegression[index] = bprLevelHigh;
                    }
                    else if (bprLevelLow < 0 && bprLevelHigh == 0)
                    {
                        ResultRegression[index] = bprLevelLow;
                    }
                    else
                    {
                        ResultRegression[index] = 0;
                    }

            */
}

